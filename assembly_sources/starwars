# --------------------------------- <Testing> ----------------------------------

#write 0x41 stack-push;@call(write-char);# "A"
#@call(write-newline);

#@push_anchor_address(test2);
#write 0x0A stack-push;
#write 0x00 stack-push;
#@call(loop-n-16);
#@call(write-newline);
#halt;
#@anchor(test2);
#write 0x41 stack-push;@call(write-char);# "A"
#return;

# Hello World!
#@push_anchor_address(write-char-from-gpram);
#@call(set-gpram-addr-string);
#@write_string("Hello world!\n");
#@call(set-gpram-addr-string);
#@call(loop-n-16);
#halt;

# testing
#write 0x01 stack-push;write 0x02 stack-push;@call(test-eq-8);
#write 0x01 stack-push;write 0x01 stack-push;@call(test-eq-8);
#write 0x01 stack-push;write 0x02 stack-push;@call(test-eq-8);
#write 0x01 stack-push;write 0x01 stack-push;@call(test-eq-8);
#halt;

# --------------------------------- </Testing> ---------------------------------
# --------------------------------- <Main> ---------------------------------
write 0x0A gpio-write-a;

@push_anchor_address(play-note);

# Print Loading...
@push_anchor_address(write-char-from-gpram);
@call(set-gpram-addr-string);
@write_string("Loading...\n");
@call(set-gpram-addr-string);
@call(loop-n-16);

# Call function to write data into GPRAM
@call(write-song);

# Print Imperial March!
@push_anchor_address(write-char-from-gpram);
@call(set-gpram-addr-string);
@write_string("Imperial March!\n");
@call(set-gpram-addr-string);
@call(loop-n-16);

# Stack: play-note A, play-note B, Song len A, Song len B
# Call main loop
@call(set-gpram-addr-song);
@call(loop-n-16);
halt;

# --------------------------------- </Main> ---------------------------------
# Play note function, uses current byte from GPRAM
@anchor(play-note);
# TODO
return;

# Write data into GPRAM, pushes 16 bit int onto stack for song size
@anchor(write-song);
@call(set-gpram-addr-song);
# TODO
# Push song length, TODO
write 0x00 stack-push;write 0x00 stack-push;
return;

@anchor(set-gpram-addr-string);
write 0x00 gpram-addr-a;
write 0x00 gpram-addr-b;
return;

@anchor(set-gpram-addr-song);
write 0x00 gpram-addr-a;
write 0x10 gpram-addr-b;
return;

# --------------------------------- <STD> ----------------------------------

# 16-bit add, uses two 16-bit integers on the stack, lower byte lower on the stack
# 0.A, 0.B, 1.A, 1.B
@anchor(16-bit-add);
# Set carry to 0
write 0x00 alu-c-in;
# Read 0.A
write 0x03 set-stack-offset;move offset-read alu-a;
# Read 1.A
write 0x01 set-stack-offset;move offset-read alu-b;
# Move 0.A + 1.A in place of 0.A
write 0x03 set-stack-offset;move add alu offset-write;
# Carry
move add-c alu alu-c-in;
# Read 0.B
write 0x02 set-stack-offset;move offset-read alu-a;
# Read 1.B
write 0x00 set-stack-offset;move offset-read alu-b;
# Move 0.B + 1.B in place of 0.B
write 0x02 set-stack-offset;move add alu offset-write;
# delete uneeded data from stack
move stack-pop none;move stack-pop none;
return;

# Loop, takes 4 values from the stack: Addr A, Addr B, Count A, Count B
@anchor(loop-n-16)
# 2 new values for current iteration
write 0x00 stack-push;
write 0x00 stack-push;
# Stack: Addr A, Addr B, Count A, Count B, Curr. Iter A, Curr. Iter B
@anchor(loop-n-16-beginning)
# Prepare GOTO latches and call function
write 0x05 set-stack-offset;move offset-read goto-a;
write 0x04 set-stack-offset;move offset-read goto-b;
call;
# Increment iteration count
write 0x01 stack-push;
write 0x00 stack-push;
@call(16-bit-add);
# Check if equal
# Compare Count A and Curr. Iter A
write 0x03 set-stack-offset;move offset-read alu-a;
write 0x01 set-stack-offset;move offset-read alu-b;
move eq alu stack-push;
# Stack: Addr A, Addr B, Count A, Count B, Curr. Iter A, Curr. Iter B, c.A == i.A
# Compare Count B and Curr. Iter B
write 0x03 set-stack-offset;move offset-read alu-a;
write 0x01 set-stack-offset;move offset-read alu-b;
move eq alu stack-push;
# Stack: Addr A, Addr B, Count A, Count B, Curr. Iter A, Curr. Iter B, c.A == i.A, c.B == i.B
# AND the equality results and load into goto decider
move stack-pop alu-a;move stack-pop alu-b;move and alu alu-a;move not alu goto-decider;
@goto_if(loop-n-16-beginning);
# Stack: Addr A, Addr B, Count A, Count B, Curr. Iter A, Curr. Iter B
# Clear stack
move stack-pop none;move stack-pop none;move stack-pop none;move stack-pop none;move stack-pop none;move stack-pop none;
return;

# Test
@anchor(test-eq-8)
move stack-pop alu-a;move stack-pop alu-b;
move eq alu goto-decider;
@goto_if(test-eq-8-pass);
# Print "FAIL\n"
write 0x46 stack-push;@call(write-char);
write 0x41 stack-push;@call(write-char);
write 0x49 stack-push;@call(write-char);
write 0x4C stack-push;@call(write-char);
@call(write-newline);
return;
# print "PASS\n"
@anchor(test-eq-8-pass);
write 0x50 stack-push;@call(write-char);
write 0x41 stack-push;@call(write-char);
write 0x53 stack-push;@call(write-char);
write 0x53 stack-push;@call(write-char);
@call(write-newline);
return;

# Write char
@anchor(write-char);
move stack-pop gpio-write-a;
return;

# Write char from GPRAM
@anchor(write-char-from-gpram);
move gpram-inc-addr gpio-write-a;
return;

# Newline
@anchor(write-newline);
write 0x0A gpio-write-a;
return;